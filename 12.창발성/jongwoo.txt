창발성

- 창발적 설계로 깔끔한 코드를 구현하자 - 단순설계 규칙    - 모든 테스트를 실행한다.    - 중복을 없앤다.    - 프로그래머 의도를 표현한다.    - 클래스와 메서드 수를 최소로 줄인다.  - 해당 항목들이 소프트웨어 설계 품질을 크게 높여준다. 
- 모든 테스트를 실행하라 - 설계는 의도한 대로 돌아가는 시스템을 내놓아야 한다. - 테스트를 철저히 거쳐 모든 테스트 케이스를 항상 통과하는 시스템은 ‘테스트가 가능한 시스템’이다. - 테스트가 불가능한 시스템은 검증도 불가능하다. - 결합도가 높으면 테스트 케이스를 작성하기 어렵다. 그렇기 때문에 테스트케이스를 많이 작성할수록 개발자는 DIP와 같은 원칙을 적용하고 의존성주입, 인터페이스, 추상화 등과 같은 도구를 사용해 결합도를 낮춘다. - 테스트 케이스를 작성하면 설계 품질이 높아진다. 
- 리펙터링 - 테스트케이스가 있기 때문에 코드를정리하면서 시스템이 깨질까 걱정할 필요가 없다. - 리펙터링 단계에서는 소프트웨어 설계 품질을 높이는 기법이라면 무엇이든 적용해도 괜찮다. - 단순한 설계 규칙 중 나머지 3개를 적용해 중복을 제거하고, 프로그래머 의도를 표현하고, 클래스와 메서드 수를 최소로 줄이는 단계이기도 하다. 
- 중복을 없애라 - 우수한 설계에서 중복은 커다란 적이다. - 중복은 추가작업, 추가 위험, 불필요한 복잡도를 의미한다. 
- 표현하라 - 코드를 짜는동안에는 문제에 빠져 코드를 구석구석 이해하기 때문에 자신이 이해하는 코드를 짜기는 쉽다. - 나중에 코드를 유지보수할 사람이 코드를 짜는 사람만큼이나 문제를 깊이 이해할 가능성은 희박하다. - 코드는 개발자의 의도를 분명히 표현해야 한다. 개발자가 코드를 명백하게 짤수록 다른 사람이 그 코도를 이해하기 쉬워진다. 그래야 결함이 줄어들고 유지보수 허기가 쉬워진다.  - 표현을 잘하는 대표적인 방법    - 좋은 이름을 선택한다.    - 함수와 클래스 크기를 가능한 줄인다.    - 표준 명칭을 사용한다.    - 단위 테스트 케이스를 꼼꼼히 사용한다.  - 하지만 표현력을 높이는 가장 중요한 방법은 노력이다. 흔히 코드만 돌린 후 다음 문제로 직행하는 사례가 너무도 흔하다. - 자신의 작품(코드)를 조금 더 자랑하라. 
- 클래스와 메서드 수를 최소로 줄여라. - 위에서 말한 기본적인 개념들도 극단으로 치달으면 득보다 실이 많아진다. - 함수와 클래스 크기를 작게 유지하면서 동시에 시스템 크기도 작게 유지해야 한다. - 클래스와 함수 수를 줄이는 작업도 중요하지만, 테스트 케이스를 만들고 중복을 제거하고 의도를 표현하는 작업이 더 중요하다. 
- 결론 - 경험을 대신할 수 있는 단순한 개발기법은 없다. - 단순한 설계 규칙을 따른다면 우수한 기법과 원칙을 단번에 활용할 수 있다.

